package application;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/*
 * SINGLETON DB INTERFACE TO MANAGE DB QUERIES
 */
public class MagusDBInterface implements IDao{

	private static MagusDBInterface dbInterface;
	private static String starterTableOfDB = "type_damages";
	private static Connection conn = null;
	private static PreparedStatement pstmt = null;
	
	private MagusDBInterface(){	
		try {
			Class.forName(JDBC_DRIVER_FORMAGUS);
			conn = DriverManager.getConnection(JDBC_URLTO_DAMAGEDB);
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
	}
	/*
	 * DB INTERFACE SINGLETON DELEGATOR METHOD
	 */
	public static MagusDBInterface getDBConnection(){
		if(dbInterface == null){
			dbInterface = new MagusDBInterface();
		}
		return dbInterface;
	}
	
	/*
	 * THIS METHOD IS TO REACH VALUES THAT DIRECTLY PRESENTABLE IN VIEW CONTORLS
	 * -> THIS IS TO GET EX. dice/area OR weapon_type/damages_group COLUMNS
	 */
	public static Map<String, String> getDoubleColumnContent(String sql, String[] prepDatas){
		
		ResultSet datas = executeNewPrepQuery(sql, prepDatas);
		return processOfParalelColumnResult(datas);

	}
	
	/*
	 * THIS METHOD IS TO REACH VALUE PAIRS FROM A DEFINED TABLE
	 * -> TO USE THEM IN VIEW PROCESSES MAY NEED
	 */
	public static String[] getTheValuePairOfSpecificCells(String sql, String[] prepDatas){
		
		ResultSet datas = executeNewPrepQuery(sql, prepDatas);
		return processOfParirOfCellResult(datas);
	}
	

	private static ResultSet executeNewPrepQuery(String sql, String[] prepDatas){
		try {
			pstmt = conn.prepareStatement(sql);
			for(int i = 0; i< prepDatas.length; i++ ){
				pstmt.setString(i, prepDatas[i]);
			}
			return pstmt.executeQuery();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private static Map<String, String> processOfParalelColumnResult(ResultSet datas){
		Map<String, String> result = new HashMap<String, String>();
		
		try {
			while (datas.next()){
				result.put(datas.getString(0), datas.getString(1));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
	private static Map<String, String> processOfParalelRowResult(ResultSet datas){
		Map<String, String> result = new HashMap<String, String>();
		
		try {
			while (datas.next()){
				result.put(datas.getString(0),datas.getString(1));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
	private static String[] processOfParirOfCellResult(ResultSet datas){
		String[] result = new String[2];
		
		return result;
	}
	
}
